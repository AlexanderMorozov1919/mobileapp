package main

import (
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/AlexanderMorozov1919/mobileapp/database"
	_ "github.com/AlexanderMorozov1919/mobileapp/docs" // docs is generated by Swag CLI
	"github.com/AlexanderMorozov1919/mobileapp/internal/handlers"
	"github.com/AlexanderMorozov1919/mobileapp/internal/models"
	"github.com/AlexanderMorozov1919/mobileapp/internal/repository"
	"github.com/AlexanderMorozov1919/mobileapp/internal/services"
	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
	"gorm.io/gorm"
)

// @title MobileApp API
// @version 1.0
// @description This is a sample server for mobile application.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.email your@email.com

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:8080
// @BasePath /
// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
func main() {
	// Инициализация БД
	if err := database.Init(); err != nil {
		log.Fatalf("Failed to initialize database: %v", err)
	}

	// Генерация тестовых данных
	if err := GenerateTestData(database.GetDB()); err != nil {
		log.Fatalf("Failed to generate test data: %v", err)
	}

	log.Println("Test data generated successfully")

	recepRepo := repository.NewReceptionRepository(database.GetDB())

	recepService := services.NewReceptionService(recepRepo)

	recepHandler := handlers.NewReceptionHandler(recepService)

	// Настройка роутера
	router := gin.Default()

	// Роуты авторизации
	router.GET("/main/:doctor_id", recepHandler.GetReceptionsByDoctorAndDate)

	// router.GET("/patients/:id", patientHandler.GetAllPatients)

	// Swagger route
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// Запуск сервера
	go func() {
		if err := router.Run(":8080"); err != nil {
			log.Fatalf("Failed to start server: %v", err)
		}
	}()

	log.Println("Server started on :8080")

	// Ожидание сигнала завершения
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit
	log.Println("Shutting down...")
}

func GenerateTestData(db *gorm.DB) error {
	// ... (предыдущий код очистки и миграции остается без изменений)

	// Добавляем тестовых докторов
	doctors := []models.Doctor{
		{
			FirstName:      "Иван",
			MiddleName:     "Иванович",
			LastName:       "Иванов",
			Login:          "doctor1",
			PasswordHash:   "hashed_password_1",
			Specialization: "Терапевт",
			CreatedAt:      time.Now(),
			UpdatedAt:      time.Now(),
		},
		{
			FirstName:      "Петр",
			MiddleName:     "Петрович",
			LastName:       "Петров",
			Login:          "doctor2",
			PasswordHash:   "hashed_password_2",
			Specialization: "Хирург",
			CreatedAt:      time.Now(),
			UpdatedAt:      time.Now(),
		},
		{
			FirstName:      "Анна",
			MiddleName:     "Сергеевна",
			LastName:       "Смирнова",
			Login:          "doctor3",
			PasswordHash:   "hashed_password_3",
			Specialization: "Кардиолог",
			CreatedAt:      time.Now(),
			UpdatedAt:      time.Now(),
		},
	}

	if err := db.Create(&doctors).Error; err != nil {
		return err
	}

	// Добавляем тестовых пациентов
	patients := []models.Patient{
		{
			FirstName: "Алексей",
			CreatedAt: time.Now(),
			UpdatedAt: time.Now(),
		},
		{
			FirstName: "Мария",
			CreatedAt: time.Now(),
			UpdatedAt: time.Now(),
		},
		{
			FirstName: "Дмитрий",
			CreatedAt: time.Now(),
			UpdatedAt: time.Now(),
		},
	}

	if err := db.Create(&patients).Error; err != nil {
		return err
	}

	// Создаем записи на прием на разные даты
	now := time.Now()
	receptions := []models.Reception{
		// Прошедшие приемы
		{
			DoctorID:        doctors[0].ID,
			PatientID:       patients[0].ID,
			Date:            now.Add(-72 * time.Hour),
			Diagnosis:       "ОРВИ",
			Recommendations: "Постельный режим, обильное питье",
			Status:          models.StatusCompleted,
			Address:         "ул. Ленина, д. 10, каб. 101",
			CreatedAt:       now.Add(-73 * time.Hour),
			UpdatedAt:       now.Add(-71 * time.Hour),
		},
		{
			DoctorID:        doctors[1].ID,
			PatientID:       patients[1].ID,
			Date:            now.Add(-48 * time.Hour),
			Diagnosis:       "Перелом руки",
			Recommendations: "Наложить гипс",
			Status:          models.StatusCompleted,
			Address:         "ул. Пушкина, д. 5, каб. 205",
			CreatedAt:       now.Add(-49 * time.Hour),
			UpdatedAt:       now.Add(-47 * time.Hour),
		},
		{
			DoctorID:        doctors[2].ID,
			PatientID:       patients[2].ID,
			Date:            now.Add(-24 * time.Hour),
			Diagnosis:       "Гипертония",
			Recommendations: "Контроль давления, диета",
			Status:          models.StatusCompleted,
			Address:         "ул. Гагарина, д. 15, каб. 302",
			CreatedAt:       now.Add(-25 * time.Hour),
			UpdatedAt:       now.Add(-23 * time.Hour),
		},

		// Сегодняшние приемы
		{
			DoctorID:        doctors[0].ID,
			PatientID:       patients[1].ID,
			Date:            time.Date(now.Year(), now.Month(), now.Day(), 10, 0, 0, 0, now.Location()),
			Diagnosis:       "Гастрит",
			Recommendations: "Диета, антациды",
			Status:          models.StatusCompleted,
			Address:         "ул. Ленина, д. 10, каб. 101",
			CreatedAt:       now.Add(-2 * time.Hour),
			UpdatedAt:       now.Add(-1 * time.Hour),
		},
		{
			DoctorID:  doctors[1].ID,
			PatientID: patients[2].ID,
			Date:      time.Date(now.Year(), now.Month(), now.Day(), 14, 30, 0, 0, now.Location()),
			Status:    models.StatusScheduled,
			Address:   "ул. Пушкина, д. 5, каб. 205",
			CreatedAt: now.Add(-3 * time.Hour),
			UpdatedAt: now.Add(-2 * time.Hour),
		},

		// Будущие приемы (на разные дни)
		{
			DoctorID:  doctors[0].ID,
			PatientID: patients[2].ID,
			Date:      now.Add(24 * time.Hour),
			Status:    models.StatusScheduled,
			Address:   "ул. Ленина, д. 10, каб. 101",
			CreatedAt: now,
			UpdatedAt: now,
		},
		{
			DoctorID:  doctors[1].ID,
			PatientID: patients[0].ID,
			Date:      now.Add(48 * time.Hour),
			Status:    models.StatusScheduled,
			Address:   "ул. Пушкина, д. 5, каб. 205",
			CreatedAt: now,
			UpdatedAt: now,
		},
		{
			DoctorID:  doctors[2].ID,
			PatientID: patients[1].ID,
			Date:      now.Add(72 * time.Hour),
			Status:    models.StatusScheduled,
			Address:   "ул. Гагарина, д. 15, каб. 302",
			CreatedAt: now,
			UpdatedAt: now,
		},
		{
			DoctorID:  doctors[0].ID,
			PatientID: patients[1].ID,
			Date:      now.Add(96 * time.Hour),
			Status:    models.StatusScheduled,
			Address:   "ул. Ленина, д. 10, каб. 101",
			CreatedAt: now,
			UpdatedAt: now,
		},
		{
			DoctorID:  doctors[2].ID,
			PatientID: patients[0].ID,
			Date:      now.Add(120 * time.Hour),
			Status:    models.StatusScheduled,
			Address:   "ул. Гагарина, д. 15, каб. 302",
			CreatedAt: now,
			UpdatedAt: now,
		},

		// Отмененные приемы
		{
			DoctorID:  doctors[1].ID,
			PatientID: patients[2].ID,
			Date:      now.Add(-12 * time.Hour),
			Status:    models.StatusCancelled,
			Address:   "ул. Пушкина, д. 5, каб. 205",
			CreatedAt: now.Add(-24 * time.Hour),
			UpdatedAt: now.Add(-12 * time.Hour),
		},
		{
			DoctorID:  doctors[2].ID,
			PatientID: patients[0].ID,
			Date:      now.Add(36 * time.Hour),
			Status:    models.StatusCancelled,
			Address:   "ул. Гагарина, д. 15, каб. 302",
			CreatedAt: now.Add(-48 * time.Hour),
			UpdatedAt: now.Add(-12 * time.Hour),
		},
	}

	if err := db.Create(&receptions).Error; err != nil {
		return err
	}

	return nil
}
