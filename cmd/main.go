package main

import (
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/AlexanderMorozov1919/mobileapp/database"
	_ "github.com/AlexanderMorozov1919/mobileapp/docs" // docs is generated by Swag CLI
	"github.com/AlexanderMorozov1919/mobileapp/internal/handlers"
	"github.com/AlexanderMorozov1919/mobileapp/internal/repository"
	"github.com/AlexanderMorozov1919/mobileapp/internal/services"
	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

// @title MobileApp API
// @version 1.0
// @description This is a sample server for mobile application.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.email your@email.com

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:8080
// @BasePath /
// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
func main() {
	// Инициализация БД
	if err := database.Init(); err != nil {
		log.Fatalf("Failed to initialize database: %v", err)
	}

	// Инициализация зависимостей авторизации
	authRepo := repository.NewAuthRepository(database.GetDB())
	authService := services.NewAuthService(
		authRepo, // Теперь передаётся указатель
		"your_jwt_secret_key",
		24*time.Hour,
	)
	authHandler := handlers.NewAuthHandler(authService)

	// Настройка роутера
	router := gin.Default()

	// Роуты авторизации
	router.POST("/register", authHandler.Register)
	router.POST("/login", authHandler.Login)

	// Swagger route
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// Запуск сервера
	go func() {
		if err := router.Run(":8080"); err != nil {
			log.Fatalf("Failed to start server: %v", err)
		}
	}()

	log.Println("Server started on :8080")

	// Ожидание сигнала завершения
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit
	log.Println("Shutting down...")
}
